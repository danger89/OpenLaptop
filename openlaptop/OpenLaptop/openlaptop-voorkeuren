#!/usr/bin/python
# -*- coding: utf-8 -*-

import urllib2, os, shutil, tempfile
import threading
import sys, webbrowser, subprocess
from subprocess import Popen, PIPE, STDOUT

try:  
    import pygtk  
    pygtk.require("2.0")
except:  
    pass  
try:  
    import gtk  
except:  
    print("GTK Not Availible")
    sys.exit(1)

import gobject
gobject.threads_init()
#gtk.gdk.threads_init()

class IdleObject(gobject.GObject):
    """
    Override gobject.GObject to always emit signals in the main thread
    by emmitting on an idle handler
    """
    def __init__(self):
        gobject.GObject.__init__(self)

    def emit(self, *args):
        gobject.idle_add(gobject.GObject.emit,self,*args)

class BrowserThread(threading.Thread, IdleObject):
    """
    Main thread gobject signals to return information
    to the GUI.
    """
    __gsignals__ =  { 
            "completed": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, [])
            }

    def __init__(self, appMode, url):
        threading.Thread.__init__(self)
        IdleObject.__init__(self)
        self.appMode = appMode
        self.url = url

    def run(self):
        if self.appMode:
            append = "--app="
        else:
            append = ""

        proc = subprocess.Popen('google-chrome %U --enable-extensions ' + append + self.url, shell=True, stdin=None, stdout=PIPE, stderr=STDOUT, executable="/bin/bash")
        proc.wait()
        if proc.returncode == 0:
            return True
        else:
            proc = subprocess.Popen('chromium-browser %U --enable-extensions ' + append + self.url, shell=True, stdin=None, stdout=PIPE, stderr=STDOUT, executable="/bin/bash")
            proc.wait()
            if proc.returncode == 0:            
                return True
            else:
                print "Error: No Chrome Browser installed"       
                return False

class SendMessage (threading.Thread):

    def __init__( self, name, email, message):
        threading.Thread.__init__(self)
        self.name = name
        self.email = email
        self.message = message
    
    def run(self):
        gtk.gdk.threads_enter()  
        print "Threaded"
        gtk.gdk.threads_leave()

class OpenlaptopGui:

    #####################
    ## The init function
    #####################
    def __init__( self ):  
              
        if self.DEBUG:
            DATA_PATH = ""
        else:
            DATA_PATH = self.DATA_DIR

        self.builder = gtk.Builder()
        self.builder.add_from_file( DATA_PATH + "openlaptop-voorkeuren.ui" )
        dic = { 
            "on_open_about_us_clicked" : self.about_us,
            "on_open_manual_clicked" : self.open_manual,
            "on_open_customer_support_clicked" : self.open_support,
            "on_open_faq_clicked" : self.open_faq,
            "on_step1_clicked" : self.step1,  
            "on_step2_clicked" : self.step2, 
            "on_step3_clicked" : self.step3,           
            "on_clear_clicked" : self.clear,
            "on_send_email_clicked" : self.send_email,  
            "on_exit_clicked" : self.quit,
            "on_visit_website_clicked" : self.visit_website,            
            "on_windowMain_destroy" : self.quit,
        }

        self.builder.connect_signals( dic )

    def about_us(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/over-openlaptop"
        webbrowser.open(url,new=new)  

    def open_manual(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning/handleiding"
        webbrowser.open(url,new=new)  

    def open_support(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning"
        webbrowser.open(url,new=new)  
    
    def open_faq(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning/faq"
        webbrowser.open(url,new=new)       


    def step1(self, widget):
        thread = BrowserThread(False, "https://accounts.google.com/SignUp?continue=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fcategory%2Fextensions%3Fhl%3Dnl")
        thread.connect("completed", self.thread_finished)
        thread.start()

    def step2(self, widget):
        thread = BrowserThread(False, "https://chrome.google.com/webstore/detail/gbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.start()

    def step3(self, widget):
        thread = BrowserThread(True, "gbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.start()

    def thread_finished(self, thread):
        print "Thread done"

    def send_email(self, widget):
        entry1 = self.builder.get_object("name")        
        entry2 = self.builder.get_object("email")
        entry3 = self.builder.get_object("message")
        message_buffer = entry3.get_buffer()
        start, end = message_buffer.get_bounds()
        try:
            send_message = SendMessage(entry1.get_text(), entry2.get_text(), message_buffer.get_text(start, end))
            send_message.start()
            
            send_email_button = self.builder.get_object("send_email")
            send_email_button.set_sensitive(False) # disable send button
            #Show success
        except ValueError:            
            send_email_button = self.builder.get_object("send_email")
            send_email_button.set_sensitive(True)
            self.builder.get_object("errorBox").show()
            return 0
        self.builder.get_object("errorBox").hide()


    def clear(self, widget):
        entry1 = self.builder.get_object("name")        
        entry2 = self.builder.get_object("email")
        entry3 = self.builder.get_object("message")
        entry4 = self.builder.get_object("send_email")
        entry1.set_text("")
        entry2.set_text("")
        entry3.get_buffer().set_text("")
        entry4.set_sensitive(True)

    def visit_website(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl"
        webbrowser.open(url,new=new)
  
    def quit(self, widget):
        sys.exit(0)

# Define data
OpenlaptopGui.DEBUG=True
OpenlaptopGui.DATA_DIR="/usr/share/openlaptop-voorkeuren/"

# Run the main loop
program = OpenlaptopGui()
gtk.main()
