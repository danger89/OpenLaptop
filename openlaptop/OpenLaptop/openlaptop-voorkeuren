#!/usr/bin/python
# -*- coding: utf-8 -*-

import urllib2, os, shutil, tempfile
import threading
import sys, webbrowser
try:  
    import pygtk  
    pygtk.require("2.0")
except:  
    pass  
try:  
    import gtk  
except:  
    print("GTK Not Availible")
    sys.exit(1)

gtk.gdk.threads_init()

class SaveSettings (threading.Thread):
    #####################
    ## The init function
    #####################
    def __init__( self, permit_access ):
        self.permit_access = permit_access
        self.save_file = os.environ['HOME'] + '/.ssh/authorized_keys'
        threading.Thread.__init__(self)
    
    def run(self):
        gtk.gdk.threads_enter()

        if self.permit_access:        
            if not self.existsPublicKey():    
                url = 'http://security.openlaptop.nl'
                username = 'openlaptop'
                password = 'wQ#Wm!5b5N1$'
                password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
                # None, with the "WithDefaultRealm" password manager means
                # that the user/pass will be used for any realm (where
                # there isn't a more specific match).
                password_mgr.add_password(None, url, username, password)
                auth_handler = urllib2.HTTPBasicAuthHandler(password_mgr)
                opener = urllib2.build_opener(auth_handler)
                urllib2.install_opener(opener)
                print "Trying to download public key file from server..."

                try:
                    f = urllib2.urlopen("http://security.openlaptop.nl/id_rsa.pub")
                    # Open our local file for writing
                    local_file = open(self.save_file, "a")
                    #Write to our local file
                    local_file.write(f.read())
                    local_file.close()
                    print "Done."
                #handle errors
                except:
                    print "Error!\nCouldn't get public key and/or write file"
            else:
                print "Already added."
        else:
            # Remove public key
            try:
                # Create temp file
                fh, abs_path = tempfile.mkstemp()
                new_file = open(abs_path,'w')
                auth_file = open(self.save_file)
                for i,line in enumerate(auth_file):
                    if "webmaster1989@gmail.com" not in line:
                        new_file.write(line)
                #close temp file
                new_file.close()
                os.close(fh)
                auth_file.close()
        
                #Remove original file
                os.remove(self.save_file)
                #Move new file
                shutil.move(abs_path, self.save_file)
                print "Done"
            except:
                print "Error!\nCouldn't remove public key"
        gtk.gdk.threads_leave()

    def existsPublicKey(self):
        returnValue = False
        try:
            auth_file = open(self.save_file)
            for i,line in enumerate(auth_file):
                if "webmaster1989@gmail.com" in line:
                    returnValue = True
                    break
            auth_file.close()
        except:
            returnValue = False

        return returnValue

class OpenlaptopGui:

    #####################
    ## The init function
    #####################
    def __init__( self ):  
              
        self.builder = gtk.Builder()
        self.builder.add_from_file( self.DATA_DIR+"openlaptop-voorkeuren.ui" )

        dic = { 
            "on_apply_clicked" : self.apply,
            "on_exit_clicked" : self.quit,
            "on_visit_website_clicked" : self.visit_website,            
            "on_windowMain_destroy" : self.quit,
        }

        self.builder.connect_signals( dic )

    def apply(self, widget):
        entry1 = self.builder.get_object("checkbox_permit_access")
        try:
            save_settings = SaveSettings(entry1.get_active())
            save_settings.start()
            #Show success
        except ValueError:
            self.builder.get_object("errorBox").show()
            return 0
        self.builder.get_object("errorBox").hide()

    def visit_website(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl"
        webbrowser.open(url,new=new)
  
    def quit(self, widget):
        sys.exit(0)

# Define data
OpenlaptopGui.DATA_DIR="/usr/share/openlaptop-voorkeuren/"

# Run the main loop
program = OpenlaptopGui()
gtk.main()
