#!/usr/bin/python
# -*- coding: utf-8 -*-

import urllib2, os, shutil, tempfile
import threading
import sys, webbrowser, subprocess
from subprocess import Popen, PIPE, STDOUT
import smtplib
from smtplib import SMTPException
from datetime import datetime
from email.mime.text import MIMEText
import base64, re
import socket
import string

try:  
    import pygtk  
    pygtk.require("2.0")
except:  
    pass  
try:  
    import gtk  
except:  
    print("GTK Not Availible")
    sys.exit(1)

import gobject
gobject.threads_init()
gtk.gdk.threads_init()

class IdleObject(gobject.GObject):
    """
    Override gobject.GObject to always emit signals in the main thread
    by emmitting on an idle handler
    """
    def __init__(self):
        gobject.GObject.__init__(self)

    def emit(self, *args):
        gobject.idle_add(gobject.GObject.emit,self,*args)

class BrowserThread(threading.Thread, IdleObject):

    __gsignals__ =  { 
            "completed": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, [])
            }

    def __init__(self, appMode, url):
        threading.Thread.__init__(self)
        IdleObject.__init__(self)
        self.appMode = appMode
        self.url = url
        self.returnValue = False

    def run(self):
        if self.appMode:
            append = "--app-id="
        else:
            append = ""

        proc = subprocess.Popen('google-chrome %U --enable-extensions ' + append + self.url, shell=True, stdin=None, stdout=PIPE, stderr=STDOUT, executable="/bin/bash")
        proc.wait()
        if proc.returncode == 0:
            self.returnValue = True
        else:
            proc = subprocess.Popen('chromium-browser %U --enable-extensions ' + append + self.url, shell=True, stdin=None, stdout=PIPE, stderr=STDOUT, executable="/bin/bash")
            proc.wait()
            if proc.returncode == 0:            
                self.returnValue =  True
            else:       
                self.returnValue = False
        self.emit("completed")

class SendMessage (threading.Thread, IdleObject):

    __gsignals__ =  { 
            "error": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, []),
            "success": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, [])
            }

    def __init__( self, name, email, message):
        threading.Thread.__init__(self)
        IdleObject.__init__(self)
        self.name = name
        self.email = email
        self.message = message
        self.error_message = ""

    def validateEmail(self, email):
        #self.email_re = re.compile(
        #    r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*"  # dot-atom
        #    r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-011\013\014\016-\177])*"' # quoted-string
        #    r')@(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?$', re.IGNORECASE)  # domain
	    if re.match("^[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+.[a-zA-Z]{2,6}$", email) != None:
		    return True
	    return False

    def run(self):
        if not self.name:
            self.error_message = "Geef a.u.b. uw naam op."
            self.emit("error")
        elif not self.email:
            self.error_message = "Vul a.u.b. uw e-mail adres in."
            self.emit("error")
        elif not self.validateEmail(self.email):
            self.error_message = "Uw e-mailadres is niet geldig, probeer het nogmaals a.u.b."
            self.emit("error")
        elif not self.message:
            self.error_message = "Schrijf een bericht a.u.b."
            self.emit("error")
        else:
            # Info
            sender = self.email
            receivers = ['info@openlaptop.nl']
            usr = 'contact.openlaptop@gmail.com'
            ciph = 'd3pqa3lvcGxpenZoaHFkaw=='
            pwd = base64.b64decode(ciph)
            text_subtype = 'plain'

            gtk.gdk.threads_enter()
            pub_ip = urllib2.urlopen("http://automation.whatismyip.com/n09230945.asp").read()
            content = self.message + "\n\r\n\rVerzonden vanaf IP-adres: " + pub_ip

            # Create e-mail
            message = MIMEText(content, text_subtype)
            message['Date'] = datetime.strftime(datetime.now(), '%Y-%m-%d')
            message['Subject'] = 'OpenLaptop - Contact'
            message['From'] = self.name        
            message['Reply-to'] = self.email
            message['To'] = "Melroy van den Berg <info@openlaptop.nl>"

            try:
                # Initialize SMTP server
                server=smtplib.SMTP('smtp.gmail.com:587')
                server.starttls()
                server.login(usr,pwd)

                # Send mail
                server.sendmail(sender, receivers, message.as_string())   
                server.quit()
       
                self.emit("success")
            except SMTPException:            
                self.error_message = "Sorry, de e-mail kon niet verzonden worden. Probeer het nogmaals a.u.b."
                self.emit("error")
            except:                
                self.error_message = "Sorry, de e-mail kon niet verzonden worden. Probeer het nogmaals a.u.b."
                self.emit("error")

            gtk.gdk.threads_leave()

#http://oreilly.com/pub/h/1968
class IRCClient (threading.Thread, IdleObject):

    __gsignals__ =  { 
            "error": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, []),   
            "connected": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, []),
            "disconnected": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, []),
            "message": (
                gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, [])
            }

    def __init__( self, host, port, channel, nickname):
        threading.Thread.__init__(self)
        IdleObject.__init__(self)
        self.socket = None
        self.cancelled = False
        self.host = host
        self.port = port
        self.channel = channel
        if len(nickname) > 16:
            self.nickname = nickname[:16]
        else:
            self.nickname = nickname
        self.user = "danger89"
        self.realname = "Melroy van den Berg (Eigenaar)"
        self.welcome_message = "maakt verbinding met het OpenLaptop channel via OpenLaptop hulpprogramma."
        self.error_message = ""
        self.message = ""

    def disconnect(self):
        self.cancelled = True
        if self.socket:  
            self.socket.shutdown(2)
            self.socket.close()

    def send_message(self, message):
        if self.socket:  
            print "message: " , message              
            self.socket.send('PRIVMSG ' + self.user + ' ' + message + '\r\n')

    def run(self):
        readbuffer = ""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((self.host, self.port))

            self.socket.send('NICK ' + self.nickname + ' \r\n')
            self.socket.send('USER ' + self.nickname + ' ' + self.nickname + ' ' + self.nickname + ' :OpenLaptop Gebruiker\r\n')
            self.socket.send('JOIN ' + self.channel + '\r\n')
            self.emit("connected")
        except socket.error, msg:
            self.socket = None
            self.error_message = msg            
            self.emit("error")

        while not self.cancelled:
            readbuffer=readbuffer+self.socket.recv(1024)
            temp=string.split(readbuffer, "\n")
            readbuffer=temp.pop( )

            for line in temp:                
                print "DEBUG: ", line
                if line.find('PING') != -1:
                    self.socket.send('PONG ' + self.host + '\r\n')
                elif line.find('End of /MOTD command.') != -1:
                    self.socket.send('privmsg ' + self.channel + ' :\x01ACTION ' + self.welcome_message + '\x01\n')
                elif line.find('PRIVMSG ' + self.nickname) != -1:            
                    nick = line.split ( '!' ) [ 0 ].replace ( ':', '')
                    if nick == self.user:
                        nick = self.realname

                    index = line.find(':', 1) + 1
                    receive_message = line[index:]
                    self.message = nick + ': ' + receive_message                    
                    self.emit("message")
                elif line.find(self.user + ' :No such nick' ) != -1:
                    self.error_message = "Sorry, ik ben op dit moment niet online. Probeer het later a.u.b. nogmaals."
                    self.emit("error")
        self.emit("disconnected")

class OpenlaptopGui:

    #####################
    ## The init function
    #####################
    def __init__( self ):  
              
        if self.DEBUG:
            DATA_PATH = ""
        else:
            DATA_PATH = self.DATA_DIR

        self.builder = gtk.Builder()
        self.builder.add_from_file( DATA_PATH + "openlaptop-hulpprogramma.ui" )
        dic = { 
            # Support pages
            "on_open_about_us_clicked" : self.about_us,
            "on_open_manual_clicked" : self.open_manual,
            "on_open_customer_support_clicked" : self.open_support,
            "on_open_faq_clicked" : self.open_faq,
            # Remote desktop
            "on_step1_clicked" : self.step1,  
            "on_step2_clicked" : self.step2, 
            "on_step3_clicked" : self.step3,  
            "on_step4_clicked" : self.step4,    
            # Contact email
            "on_clear_clicked" : self.clear,
            "on_send_email_clicked" : self.send_email,  
            "on_visit_website_clicked" : self.visit_website, 
            "on_about_us_activate" : self.show_about_us_dialog,
            # IRC Channel
            "on_irc_connect_clicked" : self.irc_connect,
            "on_irc_disconnect_clicked" : self.irc_disconnect,
            "on_send_chat_message_clicked" : self.irc_chat_message,
            # Dialogs
            "on_about_dialag_close" : self.hide_about_us_dialog,
            "on_about_dialag_response" : self.hide_about_us_dialog,
            "on_no_chrome_close" : self.hide_no_chrome_error,
            "on_no_chrome_response" : self.hide_no_chrome_error,
            "on_email_success_close" : self.hide_send_email_success,
            "on_email_success_response" : self.hide_send_email_success,
            "on_email_error_close" : self.hide_send_email_error,
            "on_email_error_response" : self.hide_send_email_error,
            "on_irc_error_close" : self.hide_irc_error,
            "on_irc_error_response" : self.hide_irc_error,
            # Exit
            "on_windowMain_delete_event" : self.quit,
            "on_exit_clicked" : self.quit,
            "on_exit_button_activate" : self.quit,      
            "on_windowMain_destroy" : self.quit,
        }

        self.builder.connect_signals( dic )
        # IRC init
        self.ircClient = None
        # Set hostname as nickname
        host_name = socket.gethostname()
        if host_name:
            nickname = self.builder.get_object("nickname")
            nickname = nickname.set_text("gebruiker_" + host_name)

    def about_us(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/over-openlaptop"
        webbrowser.open(url,new=new)  

    def open_manual(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning/handleiding"
        webbrowser.open(url,new=new)  

    def open_support(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning"
        webbrowser.open(url,new=new)  
    
    def open_faq(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl/ondersteuning/faq"
        webbrowser.open(url,new=new)       

    def step1(self, widget):
        thread = BrowserThread(False, "https://accounts.google.com/SignUp?continue=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.connect("completed", self.thread_finished)
        thread.start()

    def step2(self, widget):
        thread = BrowserThread(False, "https://accounts.google.com/ServiceLogin?continue=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.connect("completed", self.thread_finished)
        thread.start()

    def step3(self, widget):
        thread = BrowserThread(False, "https://chrome.google.com/webstore/detail/gbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.connect("completed", self.thread_finished)
        thread.start()

    def step4(self, widget):
        thread = BrowserThread(True, "gbchcmhmhahfdphkhkmpfmihenigjmpp")
        thread.connect("completed", self.thread_finished)
        thread.start()

    def thread_finished(self, thread):
        if not thread.returnValue:
            self.show_error_no_chrome()

    def send_email(self, widget):
        entry1 = self.builder.get_object("name")        
        entry2 = self.builder.get_object("email")
        entry3 = self.builder.get_object("message")
        message_buffer = entry3.get_buffer()
        start, end = message_buffer.get_bounds()
        try:
            send_message = SendMessage(entry1.get_text(), entry2.get_text(), message_buffer.get_text(start, end))
            send_message.connect("success", self.show_send_email_success)
            send_message.connect("error", self.show_send_email_error)
            send_message.start()
            # Disable send button
            send_email_button = self.builder.get_object("send_email")
            send_email_button.set_sensitive(False) 
        except ValueError:
            print "Value error"
            return 0

    def show_send_email_success(self, thread):
        email_error = self.builder.get_object("email_success")
        email_error.run()

    def hide_send_email_success(self, widget, response): 
        if response == gtk.RESPONSE_DELETE_EVENT or gtk.RESPONSE_OK:       
            email_error = self.builder.get_object("email_success")
            email_error.hide()

    def show_send_email_error(self, thread):                
        send_email_button = self.builder.get_object("send_email")
        send_email_button.set_sensitive(True)
        email_error = self.builder.get_object("email_error")
        email_error.format_secondary_text(thread.error_message)
        email_error.run()

    def hide_send_email_error(self, widget, response):
        if response == gtk.RESPONSE_DELETE_EVENT or gtk.RESPONSE_CLOSE:
            email_error = self.builder.get_object("email_error")
            email_error.format_secondary_text("")
            email_error.hide()

    def clear(self, widget):
        entry1 = self.builder.get_object("name")        
        entry2 = self.builder.get_object("email")
        entry3 = self.builder.get_object("message")
        entry4 = self.builder.get_object("send_email")
        entry1.set_text("")
        entry2.set_text("")
        entry3.get_buffer().set_text("")
        entry4.set_sensitive(True)

    def visit_website(self, widget):
        new = 2 # open in a new tab, if possible

        url = "http://openlaptop.nl"
        webbrowser.open(url,new=new)

    def show_no_chrome_error(self):
        no_chrome = self.builder.get_object("no_chrome")
        no_chrome.run()

    def hide_no_chrome_error(self, widget, response):
        if response == gtk.RESPONSE_DELETE_EVENT or gtk.RESPONSE_CLOSE:
            no_chrome = self.builder.get_object("no_chrome")
            no_chrome.hide()

    def show_about_us_dialog(self, widget):
        about = self.builder.get_object("about_dialog")   
        about.run()

    def hide_about_us_dialog(self, widget, response):
        if response == gtk.RESPONSE_DELETE_EVENT or gtk.RESPONSE_CANCEL:
            about = self.builder.get_object("about_dialog")  
            about.hide()

    def irc_error(self, thread):
        self.show_irc_error(thread.error_message)

    def show_irc_error(self, message):
        irc_error = self.builder.get_object("irc_error")
        irc_error.format_secondary_text(message)
        irc_error.run()

    def hide_irc_error(self, widget, response):
        if response == gtk.RESPONSE_DELETE_EVENT or gtk.RESPONSE_CLOSE:
            irc_error = self.builder.get_object("irc_error")
            irc_error.format_secondary_text("")
            irc_error.hide()

    def irc_connected(self, thread):
        entry1 = self.builder.get_object("chat_message")
        entry2 = self.builder.get_object("send_chat_message")
        entry3 = self.builder.get_object("irc_connect")
        entry4 = self.builder.get_object("irc_disconnect")
        entry1.set_sensitive(True)
        entry1.grab_focus()
        entry2.set_sensitive(True)
        entry3.hide()
        entry4.show()
        self.append_text_chat("Verbonden!\r\n")

    def irc_disconnected(self, thread):
        entry1 = self.builder.get_object("chat_message")
        entry2 = self.builder.get_object("send_chat_message")
        entry3 = self.builder.get_object("irc_connect")
        entry4 = self.builder.get_object("irc_disconnect")
        entry1.set_sensitive(False)
        entry2.set_sensitive(False)
        entry3.show()
        entry4.hide()

        self.append_text_chat("Verbinding is verbroken met de server.\r\n")

    def irc_message(self, thread):
        print "Append"
        self.append_text_chat(thread.message)
    
    def irc_disconnect(self, widget):
        self.disconnectIRC()

    def irc_connect(self, widget):        
        nickname = self.builder.get_object("nickname")
        nickname = nickname.get_text()
        if not nickname:
            self.show_irc_error("Vul a.u.b. uw bijnaam in.") 
        else:
            try:
                self.ircClient = IRCClient('irc.freenode.net', 6667, '#openlaptop', nickname)
                self.ircClient.daemon=True
                self.ircClient.connect("error", self.irc_error)
                self.ircClient.connect("connected", self.irc_connected)
                self.ircClient.connect("disconnected", self.irc_disconnected)
                self.ircClient.connect("message", self.irc_message)
                self.ircClient.start()            
                self.append_text_chat("Probeert verbinding te maken...\r\n")
            except (KeyboardInterrupt, SystemExit):
                self.quitAll()

    def irc_chat_message(self, widget):        
        chat_message = self.builder.get_object("chat_message")
        text_message = chat_message.get_text()
        if text_message:            
            self.ircClient.send_message(text_message)
            self.append_text_chat("Ik: " + text_message + "\r\n")
            chat_message.set_text("")

    def append_text_chat(self, text):
        chat_window = self.builder.get_object("chat_window") 
        textbuffer = chat_window.get_buffer()
        textbuffer.insert(textbuffer.get_end_iter(), text)
        self.scroll_to_end_chat()

    def scroll_to_end_chat(self):
        chat_window = self.builder.get_object("chat_window") 
        textbuffer = chat_window.get_buffer()
        insert_mark = textbuffer.get_insert()
        textbuffer.place_cursor(textbuffer.get_end_iter())
        chat_window.scroll_to_mark(insert_mark , 0.0, True, 0.0, 1.0)

    def quit(self, widget):
        self.quitAll()

    def quitAll(self):
        self.disconnectIRC()        
        sys.exit(0)

    def disconnectIRC(self):
        if self.ircClient:
            if self.ircClient.isAlive():
                self.ircClient.disconnect()
# Define data
OpenlaptopGui.DEBUG=True
OpenlaptopGui.DATA_DIR="/usr/share/openlaptop/"

# Run the main loop
program = OpenlaptopGui()
gtk.main()
